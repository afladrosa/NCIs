def _monitor_port(self, dpid, port_no):
    rx_throughput = self.port_stats[dpid][port_no].get('rx_throughput', 0)

    # Aggiorna le porte attive
    self.active_ports = [p for p in self.port_stats[dpid] if self.port_stats[dpid][p].get('rx_throughput', 0) > self.lower_threshold]
    self.num_active_ports = len(self.active_ports) - len(self.blocked_ports)

    # Monitoraggio delle porte in base al throughput
    if rx_throughput > self.threshold:
        # Individuare il MAC address che causa l'alto throughput
        mac_addresses = [mac for mac, port in self.mac_to_port[dpid].items() if port == port_no]

        # Se il throughput supera la soglia e la porta non è bloccata
        if ((dpid, port_no) not in self.monitoring_list and (dpid, port_no) not in self.blocked_ports):
            self.logger.warning(f'\n*************LA PORTA {(dpid, port_no)} HA SUPERATO LA SOGLIA CON RX=%f*************', rx_throughput)
            self.monitoring_list.append((dpid, port_no))
            self.logger.info(f'\n*************PORTA {(dpid, port_no)} AGGIUNTA ALLA monitoring_list: {self.monitoring_list}*************')

            # Log dei MAC address che stanno inviando il traffico eccessivo
            for mac in mac_addresses:
                self.logger.info(f'Host con MAC {mac} ha superato la soglia sulla porta {(dpid, port_no)}.')

            # Blocca la porta che riceve traffico da questi MAC address
            if mac_addresses:
                mac_to_block = mac_addresses[0]  # Blocca il primo MAC che supera la soglia
                ingress_port = self.mac_to_port[dpid][mac_to_block]
                self.blocked_ports[(dpid, ingress_port)] = time.time()
                self._block_port(dpid, ingress_port)

        elif (dpid, port_no) in self.monitoring_list and (dpid, port_no) not in self.blocked_ports:
            self.logger.warning(f'\n*************LA PORTA {(dpid, port_no)} HA SUPERATO LA SOGLIA CON RX=%f*************', rx_throughput)
            self.blocked_ports[(dpid, port_no)] = time.time()
            self._block_port(dpid, port_no)

    elif rx_throughput < self.threshold:
        if (dpid, port_no) in self.monitoring_list:
            self.monitoring_list.remove((dpid, port_no))
            self.logger.info(f'\n\n*************PORTA {(dpid, port_no)} RIMOSSA DALLA monitoring_list -> monitoring_list attuale: {self.monitoring_list}*************')

            # Log dei MAC associati alla porta che è scesa sotto la soglia
            mac_addresses = [mac for mac, port in self.mac_to_port[dpid].items() if port == port_no]
            for mac in mac_addresses:
                self.logger.info(f'Host con MAC {mac} non supera più la soglia sulla porta {(dpid, port_no)}.')
